/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package qudt4dt.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-6-3")
public class Unit implements org.apache.thrift.TBase<Unit, Unit._Fields>, java.io.Serializable, Cloneable, Comparable<Unit> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Unit");

  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField QUDT_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("qudt_url", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField QUDT_ATTR_FIELD_DESC = new org.apache.thrift.protocol.TField("qudt_attr", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UnitStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UnitTupleSchemeFactory());
  }

  public String url; // required
  public String qudt_url; // required
  public QudtAttr qudt_attr; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    URL((short)1, "url"),
    QUDT_URL((short)2, "qudt_url"),
    QUDT_ATTR((short)4, "qudt_attr");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // URL
          return URL;
        case 2: // QUDT_URL
          return QUDT_URL;
        case 4: // QUDT_ATTR
          return QUDT_ATTR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUDT_URL, new org.apache.thrift.meta_data.FieldMetaData("qudt_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUDT_ATTR, new org.apache.thrift.meta_data.FieldMetaData("qudt_attr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QudtAttr.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Unit.class, metaDataMap);
  }

  public Unit() {
  }

  public Unit(
    String url,
    String qudt_url,
    QudtAttr qudt_attr)
  {
    this();
    this.url = url;
    this.qudt_url = qudt_url;
    this.qudt_attr = qudt_attr;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Unit(Unit other) {
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetQudt_url()) {
      this.qudt_url = other.qudt_url;
    }
    if (other.isSetQudt_attr()) {
      this.qudt_attr = new QudtAttr(other.qudt_attr);
    }
  }

  public Unit deepCopy() {
    return new Unit(this);
  }

  @Override
  public void clear() {
    this.url = null;
    this.qudt_url = null;
    this.qudt_attr = null;
  }

  public String getUrl() {
    return this.url;
  }

  public Unit setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getQudt_url() {
    return this.qudt_url;
  }

  public Unit setQudt_url(String qudt_url) {
    this.qudt_url = qudt_url;
    return this;
  }

  public void unsetQudt_url() {
    this.qudt_url = null;
  }

  /** Returns true if field qudt_url is set (has been assigned a value) and false otherwise */
  public boolean isSetQudt_url() {
    return this.qudt_url != null;
  }

  public void setQudt_urlIsSet(boolean value) {
    if (!value) {
      this.qudt_url = null;
    }
  }

  public QudtAttr getQudt_attr() {
    return this.qudt_attr;
  }

  public Unit setQudt_attr(QudtAttr qudt_attr) {
    this.qudt_attr = qudt_attr;
    return this;
  }

  public void unsetQudt_attr() {
    this.qudt_attr = null;
  }

  /** Returns true if field qudt_attr is set (has been assigned a value) and false otherwise */
  public boolean isSetQudt_attr() {
    return this.qudt_attr != null;
  }

  public void setQudt_attrIsSet(boolean value) {
    if (!value) {
      this.qudt_attr = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case QUDT_URL:
      if (value == null) {
        unsetQudt_url();
      } else {
        setQudt_url((String)value);
      }
      break;

    case QUDT_ATTR:
      if (value == null) {
        unsetQudt_attr();
      } else {
        setQudt_attr((QudtAttr)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case URL:
      return getUrl();

    case QUDT_URL:
      return getQudt_url();

    case QUDT_ATTR:
      return getQudt_attr();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case URL:
      return isSetUrl();
    case QUDT_URL:
      return isSetQudt_url();
    case QUDT_ATTR:
      return isSetQudt_attr();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Unit)
      return this.equals((Unit)that);
    return false;
  }

  public boolean equals(Unit that) {
    if (that == null)
      return false;

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_qudt_url = true && this.isSetQudt_url();
    boolean that_present_qudt_url = true && that.isSetQudt_url();
    if (this_present_qudt_url || that_present_qudt_url) {
      if (!(this_present_qudt_url && that_present_qudt_url))
        return false;
      if (!this.qudt_url.equals(that.qudt_url))
        return false;
    }

    boolean this_present_qudt_attr = true && this.isSetQudt_attr();
    boolean that_present_qudt_attr = true && that.isSetQudt_attr();
    if (this_present_qudt_attr || that_present_qudt_attr) {
      if (!(this_present_qudt_attr && that_present_qudt_attr))
        return false;
      if (!this.qudt_attr.equals(that.qudt_attr))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_url = true && (isSetUrl());
    list.add(present_url);
    if (present_url)
      list.add(url);

    boolean present_qudt_url = true && (isSetQudt_url());
    list.add(present_qudt_url);
    if (present_qudt_url)
      list.add(qudt_url);

    boolean present_qudt_attr = true && (isSetQudt_attr());
    list.add(present_qudt_attr);
    if (present_qudt_attr)
      list.add(qudt_attr);

    return list.hashCode();
  }

  @Override
  public int compareTo(Unit other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQudt_url()).compareTo(other.isSetQudt_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQudt_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qudt_url, other.qudt_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQudt_attr()).compareTo(other.isSetQudt_attr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQudt_attr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qudt_attr, other.qudt_attr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Unit(");
    boolean first = true;

    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("qudt_url:");
    if (this.qudt_url == null) {
      sb.append("null");
    } else {
      sb.append(this.qudt_url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("qudt_attr:");
    if (this.qudt_attr == null) {
      sb.append("null");
    } else {
      sb.append(this.qudt_attr);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (qudt_attr != null) {
      qudt_attr.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UnitStandardSchemeFactory implements SchemeFactory {
    public UnitStandardScheme getScheme() {
      return new UnitStandardScheme();
    }
  }

  private static class UnitStandardScheme extends StandardScheme<Unit> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Unit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUDT_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qudt_url = iprot.readString();
              struct.setQudt_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUDT_ATTR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.qudt_attr = new QudtAttr();
              struct.qudt_attr.read(iprot);
              struct.setQudt_attrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Unit struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.qudt_url != null) {
        oprot.writeFieldBegin(QUDT_URL_FIELD_DESC);
        oprot.writeString(struct.qudt_url);
        oprot.writeFieldEnd();
      }
      if (struct.qudt_attr != null) {
        oprot.writeFieldBegin(QUDT_ATTR_FIELD_DESC);
        struct.qudt_attr.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UnitTupleSchemeFactory implements SchemeFactory {
    public UnitTupleScheme getScheme() {
      return new UnitTupleScheme();
    }
  }

  private static class UnitTupleScheme extends TupleScheme<Unit> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Unit struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUrl()) {
        optionals.set(0);
      }
      if (struct.isSetQudt_url()) {
        optionals.set(1);
      }
      if (struct.isSetQudt_attr()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetQudt_url()) {
        oprot.writeString(struct.qudt_url);
      }
      if (struct.isSetQudt_attr()) {
        struct.qudt_attr.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Unit struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(1)) {
        struct.qudt_url = iprot.readString();
        struct.setQudt_urlIsSet(true);
      }
      if (incoming.get(2)) {
        struct.qudt_attr = new QudtAttr();
        struct.qudt_attr.read(iprot);
        struct.setQudt_attrIsSet(true);
      }
    }
  }

}

