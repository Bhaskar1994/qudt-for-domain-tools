#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class QudtUnit:
  """
  Attributes:
   - url
   - unitName
   - symbol
   - unitClass
   - abbreviation
   - factor
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'url', None, None, ), # 1
    (2, TType.STRING, 'unitName', None, "", ), # 2
    (3, TType.STRING, 'symbol', None, "", ), # 3
    (4, TType.STRING, 'unitClass', None, "", ), # 4
    (5, TType.STRING, 'abbreviation', None, "", ), # 5
    (6, TType.DOUBLE, 'factor', None, None, ), # 6
    (7, TType.DOUBLE, 'offset', None, None, ), # 7
  )

  def __init__(self, url=None, unitName=thrift_spec[2][4], symbol=thrift_spec[3][4], unitClass=thrift_spec[4][4], abbreviation=thrift_spec[5][4], factor=None, offset=None,):
    self.url = url
    self.unitName = unitName
    self.symbol = symbol
    self.unitClass = unitClass
    self.abbreviation = abbreviation
    self.factor = factor
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.unitName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.symbol = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.unitClass = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.abbreviation = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.factor = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.offset = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QudtUnit')
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 1)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.unitName is not None:
      oprot.writeFieldBegin('unitName', TType.STRING, 2)
      oprot.writeString(self.unitName)
      oprot.writeFieldEnd()
    if self.symbol is not None:
      oprot.writeFieldBegin('symbol', TType.STRING, 3)
      oprot.writeString(self.symbol)
      oprot.writeFieldEnd()
    if self.unitClass is not None:
      oprot.writeFieldBegin('unitClass', TType.STRING, 4)
      oprot.writeString(self.unitClass)
      oprot.writeFieldEnd()
    if self.abbreviation is not None:
      oprot.writeFieldBegin('abbreviation', TType.STRING, 5)
      oprot.writeString(self.abbreviation)
      oprot.writeFieldEnd()
    if self.factor is not None:
      oprot.writeFieldBegin('factor', TType.DOUBLE, 6)
      oprot.writeDouble(self.factor)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.DOUBLE, 7)
      oprot.writeDouble(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ModelicaUnit:
  """
  Attributes:
   - url
   - classPath
   - max
   - min
   - start
   - displayUnit
   - quantity
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'url', None, None, ), # 1
    (2, TType.STRING, 'classPath', None, None, ), # 2
    (3, TType.DOUBLE, 'max', None, None, ), # 3
    (4, TType.DOUBLE, 'min', None, None, ), # 4
    (5, TType.DOUBLE, 'start', None, None, ), # 5
    (6, TType.STRING, 'displayUnit', None, "", ), # 6
    (7, TType.STRING, 'quantity', None, "", ), # 7
  )

  def __init__(self, url=None, classPath=None, max=None, min=None, start=None, displayUnit=thrift_spec[6][4], quantity=thrift_spec[7][4],):
    self.url = url
    self.classPath = classPath
    self.max = max
    self.min = min
    self.start = start
    self.displayUnit = displayUnit
    self.quantity = quantity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.classPath = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.max = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.min = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.start = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.displayUnit = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.quantity = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ModelicaUnit')
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 1)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.classPath is not None:
      oprot.writeFieldBegin('classPath', TType.STRING, 2)
      oprot.writeString(self.classPath)
      oprot.writeFieldEnd()
    if self.max is not None:
      oprot.writeFieldBegin('max', TType.DOUBLE, 3)
      oprot.writeDouble(self.max)
      oprot.writeFieldEnd()
    if self.min is not None:
      oprot.writeFieldBegin('min', TType.DOUBLE, 4)
      oprot.writeDouble(self.min)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.DOUBLE, 5)
      oprot.writeDouble(self.start)
      oprot.writeFieldEnd()
    if self.displayUnit is not None:
      oprot.writeFieldBegin('displayUnit', TType.STRING, 6)
      oprot.writeString(self.displayUnit)
      oprot.writeFieldEnd()
    if self.quantity is not None:
      oprot.writeFieldBegin('quantity', TType.STRING, 7)
      oprot.writeString(self.quantity)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MdaoUnit:
  """
  Attributes:
   - url
   - name
   - expression
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'url', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'expression', None, "", ), # 3
    (4, TType.STRING, 'comment', None, "", ), # 4
  )

  def __init__(self, url=None, name=None, expression=thrift_spec[3][4], comment=thrift_spec[4][4],):
    self.url = url
    self.name = name
    self.expression = expression
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.expression = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.comment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MdaoUnit')
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 1)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.expression is not None:
      oprot.writeFieldBegin('expression', TType.STRING, 3)
      oprot.writeString(self.expression)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 4)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Unit:
  """
  Attributes:
   - url
   - qudt_u
   - modelica_u
   - mdao_u
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'url', None, None, ), # 1
    (2, TType.STRUCT, 'qudt_u', (QudtUnit, QudtUnit.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'modelica_u', (ModelicaUnit, ModelicaUnit.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'mdao_u', (MdaoUnit, MdaoUnit.thrift_spec), None, ), # 4
  )

  def __init__(self, url=None, qudt_u=None, modelica_u=None, mdao_u=None,):
    self.url = url
    self.qudt_u = qudt_u
    self.modelica_u = modelica_u
    self.mdao_u = mdao_u

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.qudt_u = QudtUnit()
          self.qudt_u.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.modelica_u = ModelicaUnit()
          self.modelica_u.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.mdao_u = MdaoUnit()
          self.mdao_u.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Unit')
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 1)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.qudt_u is not None:
      oprot.writeFieldBegin('qudt_u', TType.STRUCT, 2)
      self.qudt_u.write(oprot)
      oprot.writeFieldEnd()
    if self.modelica_u is not None:
      oprot.writeFieldBegin('modelica_u', TType.STRUCT, 3)
      self.modelica_u.write(oprot)
      oprot.writeFieldEnd()
    if self.mdao_u is not None:
      oprot.writeFieldBegin('mdao_u', TType.STRUCT, 4)
      self.mdao_u.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
