/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace qudt4dt.thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QudtUnit : TBase
  {
    private string _url;
    private string _unitName;
    private string _symbol;
    private string _unitClass;
    private string _abbreviation;
    private double _factor;
    private double _offset;

    public string Url
    {
      get
      {
        return _url;
      }
      set
      {
        __isset.url = true;
        this._url = value;
      }
    }

    public string UnitName
    {
      get
      {
        return _unitName;
      }
      set
      {
        __isset.unitName = true;
        this._unitName = value;
      }
    }

    public string Symbol
    {
      get
      {
        return _symbol;
      }
      set
      {
        __isset.symbol = true;
        this._symbol = value;
      }
    }

    public string UnitClass
    {
      get
      {
        return _unitClass;
      }
      set
      {
        __isset.unitClass = true;
        this._unitClass = value;
      }
    }

    public string Abbreviation
    {
      get
      {
        return _abbreviation;
      }
      set
      {
        __isset.abbreviation = true;
        this._abbreviation = value;
      }
    }

    public double Factor
    {
      get
      {
        return _factor;
      }
      set
      {
        __isset.factor = true;
        this._factor = value;
      }
    }

    public double Offset
    {
      get
      {
        return _offset;
      }
      set
      {
        __isset.offset = true;
        this._offset = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool url;
      public bool unitName;
      public bool symbol;
      public bool unitClass;
      public bool abbreviation;
      public bool factor;
      public bool offset;
    }

    public QudtUnit() {
      this._unitName = "";
      this.__isset.unitName = true;
      this._symbol = "";
      this.__isset.symbol = true;
      this._unitClass = "";
      this.__isset.unitClass = true;
      this._abbreviation = "";
      this.__isset.abbreviation = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Url = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              UnitName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Symbol = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              UnitClass = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Abbreviation = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Double) {
              Factor = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Double) {
              Offset = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QudtUnit");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Url != null && __isset.url) {
        field.Name = "url";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Url);
        oprot.WriteFieldEnd();
      }
      if (UnitName != null && __isset.unitName) {
        field.Name = "unitName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UnitName);
        oprot.WriteFieldEnd();
      }
      if (Symbol != null && __isset.symbol) {
        field.Name = "symbol";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Symbol);
        oprot.WriteFieldEnd();
      }
      if (UnitClass != null && __isset.unitClass) {
        field.Name = "unitClass";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UnitClass);
        oprot.WriteFieldEnd();
      }
      if (Abbreviation != null && __isset.abbreviation) {
        field.Name = "abbreviation";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Abbreviation);
        oprot.WriteFieldEnd();
      }
      if (__isset.factor) {
        field.Name = "factor";
        field.Type = TType.Double;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Factor);
        oprot.WriteFieldEnd();
      }
      if (__isset.offset) {
        field.Name = "offset";
        field.Type = TType.Double;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Offset);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QudtUnit(");
      bool __first = true;
      if (Url != null && __isset.url) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Url: ");
        __sb.Append(Url);
      }
      if (UnitName != null && __isset.unitName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UnitName: ");
        __sb.Append(UnitName);
      }
      if (Symbol != null && __isset.symbol) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Symbol: ");
        __sb.Append(Symbol);
      }
      if (UnitClass != null && __isset.unitClass) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UnitClass: ");
        __sb.Append(UnitClass);
      }
      if (Abbreviation != null && __isset.abbreviation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Abbreviation: ");
        __sb.Append(Abbreviation);
      }
      if (__isset.factor) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Factor: ");
        __sb.Append(Factor);
      }
      if (__isset.offset) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Offset: ");
        __sb.Append(Offset);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
