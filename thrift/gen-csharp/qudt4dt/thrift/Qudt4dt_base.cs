/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace qudt4dt.thrift
{
  public partial class Qudt4dt_base {
    public interface Iface {
      Unit query(string url);
      #if SILVERLIGHT
      IAsyncResult Begin_query(AsyncCallback callback, object state, string url);
      Unit End_query(IAsyncResult asyncResult);
      #endif
      Quantity quantity_convert(Quantity src, string dst_url);
      #if SILVERLIGHT
      IAsyncResult Begin_quantity_convert(AsyncCallback callback, object state, Quantity src, string dst_url);
      Quantity End_quantity_convert(IAsyncResult asyncResult);
      #endif
      Dictionary<string, Quantity> list_domain_unitset(Quantity input);
      #if SILVERLIGHT
      IAsyncResult Begin_list_domain_unitset(AsyncCallback callback, object state, Quantity input);
      Dictionary<string, Quantity> End_list_domain_unitset(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_query(AsyncCallback callback, object state, string url)
      {
        return send_query(callback, state, url);
      }

      public Unit End_query(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_query();
      }

      #endif

      public Unit query(string url)
      {
        #if !SILVERLIGHT
        send_query(url);
        return recv_query();

        #else
        var asyncResult = Begin_query(null, null, url);
        return End_query(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_query(AsyncCallback callback, object state, string url)
      #else
      public void send_query(string url)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("query", TMessageType.Call, seqid_));
        query_args args = new query_args();
        args.Url = url;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Unit recv_query()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        query_result result = new query_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "query failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_quantity_convert(AsyncCallback callback, object state, Quantity src, string dst_url)
      {
        return send_quantity_convert(callback, state, src, dst_url);
      }

      public Quantity End_quantity_convert(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_quantity_convert();
      }

      #endif

      public Quantity quantity_convert(Quantity src, string dst_url)
      {
        #if !SILVERLIGHT
        send_quantity_convert(src, dst_url);
        return recv_quantity_convert();

        #else
        var asyncResult = Begin_quantity_convert(null, null, src, dst_url);
        return End_quantity_convert(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_quantity_convert(AsyncCallback callback, object state, Quantity src, string dst_url)
      #else
      public void send_quantity_convert(Quantity src, string dst_url)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("quantity_convert", TMessageType.Call, seqid_));
        quantity_convert_args args = new quantity_convert_args();
        args.Src = src;
        args.Dst_url = dst_url;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Quantity recv_quantity_convert()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        quantity_convert_result result = new quantity_convert_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "quantity_convert failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_list_domain_unitset(AsyncCallback callback, object state, Quantity input)
      {
        return send_list_domain_unitset(callback, state, input);
      }

      public Dictionary<string, Quantity> End_list_domain_unitset(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_list_domain_unitset();
      }

      #endif

      public Dictionary<string, Quantity> list_domain_unitset(Quantity input)
      {
        #if !SILVERLIGHT
        send_list_domain_unitset(input);
        return recv_list_domain_unitset();

        #else
        var asyncResult = Begin_list_domain_unitset(null, null, input);
        return End_list_domain_unitset(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_list_domain_unitset(AsyncCallback callback, object state, Quantity input)
      #else
      public void send_list_domain_unitset(Quantity input)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("list_domain_unitset", TMessageType.Call, seqid_));
        list_domain_unitset_args args = new list_domain_unitset_args();
        args.Input = input;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, Quantity> recv_list_domain_unitset()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        list_domain_unitset_result result = new list_domain_unitset_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "list_domain_unitset failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["query"] = query_Process;
        processMap_["quantity_convert"] = quantity_convert_Process;
        processMap_["list_domain_unitset"] = list_domain_unitset_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void query_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        query_args args = new query_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        query_result result = new query_result();
        try {
          result.Success = iface_.query(args.Url);
        } catch (InvalidOperation err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("query", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void quantity_convert_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        quantity_convert_args args = new quantity_convert_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        quantity_convert_result result = new quantity_convert_result();
        try {
          result.Success = iface_.quantity_convert(args.Src, args.Dst_url);
        } catch (InvalidOperation err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("quantity_convert", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void list_domain_unitset_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        list_domain_unitset_args args = new list_domain_unitset_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        list_domain_unitset_result result = new list_domain_unitset_result();
        try {
          result.Success = iface_.list_domain_unitset(args.Input);
        } catch (InvalidOperation err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("list_domain_unitset", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class query_args : TBase
    {
      private string _url;

      public string Url
      {
        get
        {
          return _url;
        }
        set
        {
          __isset.url = true;
          this._url = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool url;
      }

      public query_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Url = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("query_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Url != null && __isset.url) {
          field.Name = "url";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Url);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("query_args(");
        bool __first = true;
        if (Url != null && __isset.url) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Url: ");
          __sb.Append(Url);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class query_result : TBase
    {
      private Unit _success;
      private InvalidOperation _err;

      public Unit Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidOperation Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public query_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Unit();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new InvalidOperation();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("query_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("query_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Err != null && __isset.err) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Err: ");
          __sb.Append(Err== null ? "<null>" : Err.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class quantity_convert_args : TBase
    {
      private Quantity _src;
      private string _dst_url;

      public Quantity Src
      {
        get
        {
          return _src;
        }
        set
        {
          __isset.src = true;
          this._src = value;
        }
      }

      public string Dst_url
      {
        get
        {
          return _dst_url;
        }
        set
        {
          __isset.dst_url = true;
          this._dst_url = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool src;
        public bool dst_url;
      }

      public quantity_convert_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Src = new Quantity();
                Src.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Dst_url = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("quantity_convert_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Src != null && __isset.src) {
          field.Name = "src";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Src.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Dst_url != null && __isset.dst_url) {
          field.Name = "dst_url";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Dst_url);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("quantity_convert_args(");
        bool __first = true;
        if (Src != null && __isset.src) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Src: ");
          __sb.Append(Src== null ? "<null>" : Src.ToString());
        }
        if (Dst_url != null && __isset.dst_url) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Dst_url: ");
          __sb.Append(Dst_url);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class quantity_convert_result : TBase
    {
      private Quantity _success;
      private InvalidOperation _err;

      public Quantity Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidOperation Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public quantity_convert_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Quantity();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new InvalidOperation();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("quantity_convert_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("quantity_convert_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Err != null && __isset.err) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Err: ");
          __sb.Append(Err== null ? "<null>" : Err.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class list_domain_unitset_args : TBase
    {
      private Quantity _input;

      public Quantity Input
      {
        get
        {
          return _input;
        }
        set
        {
          __isset.input = true;
          this._input = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool input;
      }

      public list_domain_unitset_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Input = new Quantity();
                Input.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("list_domain_unitset_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Input != null && __isset.input) {
          field.Name = "input";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Input.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("list_domain_unitset_args(");
        bool __first = true;
        if (Input != null && __isset.input) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Input: ");
          __sb.Append(Input== null ? "<null>" : Input.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class list_domain_unitset_result : TBase
    {
      private Dictionary<string, Quantity> _success;
      private InvalidOperation _err;

      public Dictionary<string, Quantity> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidOperation Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public list_domain_unitset_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, Quantity>();
                  TMap _map0 = iprot.ReadMapBegin();
                  for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                  {
                    string _key2;
                    Quantity _val3;
                    _key2 = iprot.ReadString();
                    _val3 = new Quantity();
                    _val3.Read(iprot);
                    Success[_key2] = _val3;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new InvalidOperation();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("list_domain_unitset_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter4 in Success.Keys)
              {
                oprot.WriteString(_iter4);
                Success[_iter4].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("list_domain_unitset_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Err != null && __isset.err) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Err: ");
          __sb.Append(Err== null ? "<null>" : Err.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
