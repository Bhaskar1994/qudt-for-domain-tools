/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace qudt4dt.thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModelicaAttr : TBase
  {
    private string _classPath;
    private double _max;
    private double _min;
    private double _start;
    private string _displayUnit;
    private string _quantity;

    public string ClassPath
    {
      get
      {
        return _classPath;
      }
      set
      {
        __isset.classPath = true;
        this._classPath = value;
      }
    }

    public double Max
    {
      get
      {
        return _max;
      }
      set
      {
        __isset.max = true;
        this._max = value;
      }
    }

    public double Min
    {
      get
      {
        return _min;
      }
      set
      {
        __isset.min = true;
        this._min = value;
      }
    }

    public double Start
    {
      get
      {
        return _start;
      }
      set
      {
        __isset.start = true;
        this._start = value;
      }
    }

    public string DisplayUnit
    {
      get
      {
        return _displayUnit;
      }
      set
      {
        __isset.displayUnit = true;
        this._displayUnit = value;
      }
    }

    public string Quantity
    {
      get
      {
        return _quantity;
      }
      set
      {
        __isset.quantity = true;
        this._quantity = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool classPath;
      public bool max;
      public bool min;
      public bool start;
      public bool displayUnit;
      public bool quantity;
    }

    public ModelicaAttr() {
      this._displayUnit = "";
      this.__isset.displayUnit = true;
      this._quantity = "";
      this.__isset.quantity = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ClassPath = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Double) {
              Max = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              Min = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              Start = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              DisplayUnit = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Quantity = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ModelicaAttr");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ClassPath != null && __isset.classPath) {
        field.Name = "classPath";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ClassPath);
        oprot.WriteFieldEnd();
      }
      if (__isset.max) {
        field.Name = "max";
        field.Type = TType.Double;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Max);
        oprot.WriteFieldEnd();
      }
      if (__isset.min) {
        field.Name = "min";
        field.Type = TType.Double;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Min);
        oprot.WriteFieldEnd();
      }
      if (__isset.start) {
        field.Name = "start";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Start);
        oprot.WriteFieldEnd();
      }
      if (DisplayUnit != null && __isset.displayUnit) {
        field.Name = "displayUnit";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DisplayUnit);
        oprot.WriteFieldEnd();
      }
      if (Quantity != null && __isset.quantity) {
        field.Name = "quantity";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Quantity);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModelicaAttr(");
      bool __first = true;
      if (ClassPath != null && __isset.classPath) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ClassPath: ");
        __sb.Append(ClassPath);
      }
      if (__isset.max) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Max: ");
        __sb.Append(Max);
      }
      if (__isset.min) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Min: ");
        __sb.Append(Min);
      }
      if (__isset.start) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Start: ");
        __sb.Append(Start);
      }
      if (DisplayUnit != null && __isset.displayUnit) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DisplayUnit: ");
        __sb.Append(DisplayUnit);
      }
      if (Quantity != null && __isset.quantity) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Quantity: ");
        __sb.Append(Quantity);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
