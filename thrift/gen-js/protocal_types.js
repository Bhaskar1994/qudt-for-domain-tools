//
// Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof qudt4dt === 'undefined') {
  qudt4dt = {};
}
if (typeof qudt4dt.thrift === 'undefined') {
  qudt4dt.thrift = {};
}
qudt4dt.thrift.ModelicaAttr = function(args) {
  this.classPath = null;
  this.max = null;
  this.min = null;
  this.start = null;
  this.displayUnit = '';
  this.quantity = '';
  if (args) {
    if (args.classPath !== undefined) {
      this.classPath = args.classPath;
    }
    if (args.max !== undefined) {
      this.max = args.max;
    }
    if (args.min !== undefined) {
      this.min = args.min;
    }
    if (args.start !== undefined) {
      this.start = args.start;
    }
    if (args.displayUnit !== undefined) {
      this.displayUnit = args.displayUnit;
    }
    if (args.quantity !== undefined) {
      this.quantity = args.quantity;
    }
  }
};
qudt4dt.thrift.ModelicaAttr.prototype = {};
qudt4dt.thrift.ModelicaAttr.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.classPath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.max = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.min = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.start = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.displayUnit = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.quantity = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

qudt4dt.thrift.ModelicaAttr.prototype.write = function(output) {
  output.writeStructBegin('ModelicaAttr');
  if (this.classPath !== null && this.classPath !== undefined) {
    output.writeFieldBegin('classPath', Thrift.Type.STRING, 1);
    output.writeString(this.classPath);
    output.writeFieldEnd();
  }
  if (this.max !== null && this.max !== undefined) {
    output.writeFieldBegin('max', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.max);
    output.writeFieldEnd();
  }
  if (this.min !== null && this.min !== undefined) {
    output.writeFieldBegin('min', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.min);
    output.writeFieldEnd();
  }
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.start);
    output.writeFieldEnd();
  }
  if (this.displayUnit !== null && this.displayUnit !== undefined) {
    output.writeFieldBegin('displayUnit', Thrift.Type.STRING, 5);
    output.writeString(this.displayUnit);
    output.writeFieldEnd();
  }
  if (this.quantity !== null && this.quantity !== undefined) {
    output.writeFieldBegin('quantity', Thrift.Type.STRING, 6);
    output.writeString(this.quantity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

qudt4dt.thrift.MdaoAttr = function(args) {
  this.name = null;
  this.expression = '';
  this.comment = '';
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.expression !== undefined) {
      this.expression = args.expression;
    }
    if (args.comment !== undefined) {
      this.comment = args.comment;
    }
  }
};
qudt4dt.thrift.MdaoAttr.prototype = {};
qudt4dt.thrift.MdaoAttr.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.expression = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

qudt4dt.thrift.MdaoAttr.prototype.write = function(output) {
  output.writeStructBegin('MdaoAttr');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.expression !== null && this.expression !== undefined) {
    output.writeFieldBegin('expression', Thrift.Type.STRING, 2);
    output.writeString(this.expression);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 3);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

qudt4dt.thrift.QudtAttr = function(args) {
  this.unitName = '';
  this.symbol = '';
  this.unitClass = '';
  this.abbreviation = '';
  this.factor = null;
  this.offset = null;
  if (args) {
    if (args.unitName !== undefined) {
      this.unitName = args.unitName;
    }
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
    if (args.unitClass !== undefined) {
      this.unitClass = args.unitClass;
    }
    if (args.abbreviation !== undefined) {
      this.abbreviation = args.abbreviation;
    }
    if (args.factor !== undefined) {
      this.factor = args.factor;
    }
    if (args.offset !== undefined) {
      this.offset = args.offset;
    }
  }
};
qudt4dt.thrift.QudtAttr.prototype = {};
qudt4dt.thrift.QudtAttr.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unitName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.unitClass = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.abbreviation = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.factor = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.offset = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

qudt4dt.thrift.QudtAttr.prototype.write = function(output) {
  output.writeStructBegin('QudtAttr');
  if (this.unitName !== null && this.unitName !== undefined) {
    output.writeFieldBegin('unitName', Thrift.Type.STRING, 1);
    output.writeString(this.unitName);
    output.writeFieldEnd();
  }
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 2);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  if (this.unitClass !== null && this.unitClass !== undefined) {
    output.writeFieldBegin('unitClass', Thrift.Type.STRING, 3);
    output.writeString(this.unitClass);
    output.writeFieldEnd();
  }
  if (this.abbreviation !== null && this.abbreviation !== undefined) {
    output.writeFieldBegin('abbreviation', Thrift.Type.STRING, 4);
    output.writeString(this.abbreviation);
    output.writeFieldEnd();
  }
  if (this.factor !== null && this.factor !== undefined) {
    output.writeFieldBegin('factor', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.factor);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.offset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

qudt4dt.thrift.Unit = function(args) {
  this.url = null;
  this.qudt_url = null;
  this.qudt_attr = null;
  if (args) {
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.qudt_url !== undefined) {
      this.qudt_url = args.qudt_url;
    }
    if (args.qudt_attr !== undefined) {
      this.qudt_attr = args.qudt_attr;
    }
  }
};
qudt4dt.thrift.Unit.prototype = {};
qudt4dt.thrift.Unit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.qudt_url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.qudt_attr = new qudt4dt.thrift.QudtAttr();
        this.qudt_attr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

qudt4dt.thrift.Unit.prototype.write = function(output) {
  output.writeStructBegin('Unit');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.qudt_url !== null && this.qudt_url !== undefined) {
    output.writeFieldBegin('qudt_url', Thrift.Type.STRING, 2);
    output.writeString(this.qudt_url);
    output.writeFieldEnd();
  }
  if (this.qudt_attr !== null && this.qudt_attr !== undefined) {
    output.writeFieldBegin('qudt_attr', Thrift.Type.STRUCT, 4);
    this.qudt_attr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

qudt4dt.thrift.Quantity = function(args) {
  this.unit = null;
  this.value = null;
  if (args) {
    if (args.unit !== undefined) {
      this.unit = args.unit;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
qudt4dt.thrift.Quantity.prototype = {};
qudt4dt.thrift.Quantity.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.unit = new qudt4dt.thrift.Unit();
        this.unit.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

qudt4dt.thrift.Quantity.prototype.write = function(output) {
  output.writeStructBegin('Quantity');
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.STRUCT, 1);
    this.unit.write(output);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

qudt4dt.thrift.InvalidOperation = function(args) {
  this.why = null;
  if (args) {
    if (args.why !== undefined) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(qudt4dt.thrift.InvalidOperation, Thrift.TException);
qudt4dt.thrift.InvalidOperation.prototype.name = 'InvalidOperation';
qudt4dt.thrift.InvalidOperation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

qudt4dt.thrift.InvalidOperation.prototype.write = function(output) {
  output.writeStructBegin('InvalidOperation');
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 1);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

